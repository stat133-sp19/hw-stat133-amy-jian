#private function to compute mean
aux_mean <- function(trials, prob) {
return (trials*prob)
}
#private function to compute variance
aux_variance <- function(trials, prob) {
return (trials*prob*(1-prob))
}
#private function to compute mode
aux_mode <- function(trials, prob) {
return (floor(trials*prob + prob))
}
#private function to compute skewness
aux_skewness <- function(trials, prob) {
return ((1 - 2*prob)/sqrt(trials*prob*(1-prob)))
}
#private function to compute kurtosis
aux_kurtosis <- function(trials, prob) {
return ((1-6*prob*(1-prob))/(trials*prob*(1-prob)))
}
#' @title choose
#' @description
#' @param n number of trials
#' @param k number of successes
#' @return
#' @export
#' @examples
#'
#'
#'
bin_choose <- function(n, k) {
if (sum(k > n) != 0) {
stop('k cannot be greater than n')
}
return (factorial(n)/factorial(k)/factorial(n-k))
}
#' @title
#' @description
#' @param success
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_probability <- function(success, trials, prob) {
check_trials(trials)
check_prob(prob)
check_success(success, trials)
return(bin_choose(trials, success) * prob^success * (1-prob)^(trials - success))
}
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
}
context('check checker functions')
test_that('check_prob with valid probs', {
expect_true(check_prob(0.7))
expect_true(check_prob(0))
expect_true(check_prob(1))
})
test_that('check_prob fails with invalid probs', {
expect_error(check_prob(-1))
expect_error(check_prob(3))
expect_error(check_prob(c(0.3, 0.6)))
expect_error(check_prob('a'))
})
test_that('check_trials with valid trial values', {
expect_true(check_trials(4))
expect_true(check_trials(1))
})
test_that('check_trials fails with invalid probs', {
expect_error(check_trials(0))
expect_error(check_trials(-1))
expect_error(check_trials(c(1, 2)))
expect_error(check_trials('a'))
})
test_that('check_success with valid values', {
expect_true(check_success(1, 5))
expect_true(check_success(c(3, 4), 7))
expect_true(check_success(0, 2))
})
test_that('check_success fails with invalid values', {
expect_error(check_success(-1, 4))
expect_error(check_success(3, 2))
expect_error(check_success(c(-2, 6), 8))
expect_error(check_success(c(1, 6), 4))
})
context('check summary functions')
test_that('aux_mean produces correct value', {
expect_equal(aux_mean(10, 0.3), 3)
expect_equal(aux_mean(5, 0.4), 2)
expect_equal(aux_mean(7, 0.5), 3.5)
expect_equal(aux_mean(6, 0.77), 6*0.77)
})
test_that('aux_variance produces correct value', {
expect_equal(aux_variance(10, 0.3), 2.1)
expect_equal(aux_variance())
})
context('check summary functions')
test_that('aux_mean produces correct value', {
expect_equal(aux_mean(10, 0.3), 3)
expect_equal(aux_mean(5, 0.4), 2)
expect_equal(aux_mean(7, 0.5), 3.5)
expect_equal(aux_mean(6, 0.77), 6*0.77)
})
test_that('aux_variance produces correct value', {
expect_equal(aux_variance(10, 0.3), 2.1)
})
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(x=success, y=probability))
}
dis1 <- bin_distribution(trials = 5, prob = 0.5)
dis1
plot(dis1)
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis, aes(x=success, y=probability)) + geom_bar()
}
plot(dis1)
plot.bindis(dis1)
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(x=success, y=probability))
}
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(x=success, y=probability))
}
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(x=success, y=probability))
}
dis1 <- bin_distribution(trials = 5, prob = 0.5)
plot(dis1)
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(success, probability))
}
plot.bindis(dis1)
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(success))
}
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(success))
}
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(success))
}
plot(dis1)
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(success, probability))
}
plot(dis1)
#' @title
#' @description
#' @param trials
#' @param prob
#' @return
#' @export
#' @examples
#'
#'
#'
bin_distribution <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
success <- 0:trials
probability <- bin_probability(success, trials, prob)
dis <- data.frame(success, probability)
class(dis) <- c('bindis', 'data.frame')
return(dis)
}
#' @export
plot.bindis <- function(dis, ...) {
library(ggplot2)
ggplot(dis) + geom_bar(aes(success, probability), stat = 'identity')
}
plot(dis1)
library(binomial)
dis1 <- bin_distribution(trials = 5, prob = 0.5) plot(dis1)
dis1 <- bin_distribution(trials = 5, prob = 0.5)
dis1
plot(dis1)
dis1$probability
cumsum(dis1$probability)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
bin_cumulative(trials = 5, prob = 0.5)
library(binomial)
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
dis2
plot(dis2)
library(binomial)
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
plot(dis2)
library(binomial)
plot(dis2)
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
plot(dis2)
library(binomial)
plot(dis2)
library(binomial)
bin1 <- bin_variable(trials = 10, p = 0.3)
bin1
library(binomial)
summary(bin1)
library(binomial)
summary(bin1)
library(binomial)
summary(bin1)
library(binomial)
context('check summary functions')
test_that('aux_mean produces correct value', {
expect_equal(aux_mean(10, 0.3), 3)
expect_equal(aux_mean(5, 0.4), 2)
expect_equal(aux_mean(7, 0.5), 3.5)
expect_equal(aux_mean(6, 0.77), 6*0.77)
})
test_that('aux_variance produces correct value', {
expect_equal(aux_variance(10, 0.3), 2.1)
expect_equal(aux_variance(0, 0.2), 0)
expect_equal(aux_variance(1, 0.6), 0.24)
expect_equal(aux_variance(5, 0.37), 5*0.37*0.63)
})
4*0.33 + 0.33
context('check summary functions')
test_that('aux_mean produces correct value', {
expect_equal(aux_mean(10, 0.3), 3)
expect_equal(aux_mean(5, 0.4), 2)
expect_equal(aux_mean(7, 0.5), 3.5)
expect_equal(aux_mean(6, 0.77), 6*0.77)
})
test_that('aux_variance produces correct value', {
expect_equal(aux_variance(10, 0.3), 2.1)
expect_equal(aux_variance(0, 0.2), 0)
expect_equal(aux_variance(1, 0.6), 0.24)
expect_equal(aux_variance(5, 0.37), 5*0.37*0.63)
})
test_that('aux_mode produces correct value', {
expect_equal(aux_mode(10, 0.3), 3)
expect_equal(aux_mode(7, 0.5), 4)
expect_equal(aux_mode(4, 0.33), 1)
})
context('check summary functions')
test_that('aux_mean produces correct value', {
expect_equal(aux_mean(10, 0.3), 3)
expect_equal(aux_mean(5, 0.4), 2)
expect_equal(aux_mean(7, 0.5), 3.5)
expect_equal(aux_mean(6, 0.77), 6*0.77)
})
test_that('aux_variance produces correct value', {
expect_equal(aux_variance(10, 0.3), 2.1)
expect_equal(aux_variance(0, 0.2), 0)
expect_equal(aux_variance(1, 0.6), 0.24)
expect_equal(aux_variance(5, 0.37), 5*0.37*0.63)
})
test_that('aux_mode produces correct value', {
expect_equal(aux_mode(10, 0.3), 3)
expect_equal(aux_mode(7, 0.5), 3)
expect_equal(aux_mode(4, 0.33), 1)
})
library(binomial)
library(binomial)
warnings()
1/0
choose(2, 3)
2.1 % 1
2.1 %% 1
choose(5, 1)
choose(5, 2)
choose(5, 3)
source('~/Documents/SPRING 2019/STAT 133/Workouts/binomial/R/variable.R')
library(binomial)
library(binomial)
mean?
?mean
library(binomial)
mean
plot(dis2)
plot(bin1)
library(binomial)
dis1 <- bin_distribution(trials = 5, prob = 0.5)
plot(dis1)
